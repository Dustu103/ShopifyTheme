{% doc %}
  @prompt
    An interactive vertical timeline that highlights as the user scrolls
{% enddoc %}
{% assign ai_gen_id = block.id | replace: '_', '' | downcase %}

{% style %}
  .ai-timeline-container-{{ ai_gen_id }} {
    max-width: {{ block.settings.max_width }}px;
    margin: 0 auto;
    padding: {{ block.settings.section_padding }}px 20px;
    background-color: {{ block.settings.background_color }};
  }

  .ai-timeline-wrapper-{{ ai_gen_id }} {
    position: relative;
    padding-left: {{ block.settings.timeline_offset }}px;
  }

  .ai-timeline-line-{{ ai_gen_id }} {
    position: absolute;
    left: {{ block.settings.dot_size | divided_by: 2 }}px;
    top: 0;
    bottom: 0;
    width: {{ block.settings.line_width }}px;
    background-color: {{ block.settings.line_color }};
    transform: translateX(-50%);
  }

  .ai-timeline-progress-{{ ai_gen_id }} {
    position: absolute;
    left: {{ block.settings.dot_size | divided_by: 2 }}px;
    top: 0;
    width: {{ block.settings.line_width }}px;
    background-color: {{ block.settings.active_line_color }};
    transform: translateX(-50%);
    transition: height 0.3s ease;
    height: 0%;
  }

  .ai-timeline-item-{{ ai_gen_id }} {
    position: relative;
    margin-bottom: {{ block.settings.item_spacing }}px;
    opacity: {{ block.settings.inactive_opacity | divided_by: 100.0 }};
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .ai-timeline-item-{{ ai_gen_id }}.active {
    opacity: 1;
    transform: translateX({{ block.settings.active_offset }}px);
  }

  .ai-timeline-dot-{{ ai_gen_id }} {
    position: absolute;
    left: 0;
    top: {{ block.settings.dot_top_offset }}px;
    width: {{ block.settings.dot_size }}px;
    height: {{ block.settings.dot_size }}px;
    border-radius: 50%;
    background-color: {{ block.settings.dot_color }};
    border: {{ block.settings.dot_border_width }}px solid {{ block.settings.dot_border_color }};
    transform: translateX(-50%);
    transition: all 0.3s ease;
    z-index: 2;
  }

  .ai-timeline-item-{{ ai_gen_id }}.active .ai-timeline-dot-{{ ai_gen_id }} {
    background-color: {{ block.settings.active_dot_color }};
    border-color: {{ block.settings.active_dot_border_color }};
    transform: translateX(-50%) scale({{ block.settings.active_dot_scale | divided_by: 100.0 }});
  }

  .ai-timeline-content-{{ ai_gen_id }} {
    margin-left: {{ block.settings.content_margin_left }}px;
    padding: {{ block.settings.content_padding }}px;
    background-color: {{ block.settings.content_background }};
    border-radius: {{ block.settings.content_border_radius }}px;
    border: {{ block.settings.content_border_width }}px solid {{ block.settings.content_border_color }};
    box-shadow: 0 {{ block.settings.content_shadow_y }}px {{ block.settings.content_shadow_blur }}px rgba(0, 0, 0, {{ block.settings.content_shadow_opacity | divided_by: 100.0 }});
  }

  .ai-timeline-date-{{ ai_gen_id }} {
    font-size: {{ block.settings.date_font_size }}px;
    color: {{ block.settings.date_color }};
    margin-bottom: {{ block.settings.date_margin_bottom }}px;
    font-weight: {{ block.settings.date_font_weight }};
  }

  .ai-timeline-title-{{ ai_gen_id }} {
    font-size: {{ block.settings.title_font_size }}px;
    color: {{ block.settings.title_color }};
    margin: 0 0 {{ block.settings.title_margin_bottom }}px;
    font-weight: {{ block.settings.title_font_weight }};
  }

  .ai-timeline-description-{{ ai_gen_id }} {
    font-size: {{ block.settings.description_font_size }}px;
    color: {{ block.settings.description_color }};
    line-height: 1.6;
    margin: 0;
  }

  @media screen and (max-width: 749px) {
    .ai-timeline-container-{{ ai_gen_id }} {
      padding: {{ block.settings.section_padding | times: 0.7 }}px 15px;
    }

    .ai-timeline-wrapper-{{ ai_gen_id }} {
      padding-left: {{ block.settings.timeline_offset | times: 0.7 }}px;
    }

    .ai-timeline-content-{{ ai_gen_id }} {
      margin-left: {{ block.settings.content_margin_left | times: 0.7 }}px;
      padding: {{ block.settings.content_padding | times: 0.8 }}px;
    }

    .ai-timeline-title-{{ ai_gen_id }} {
      font-size: {{ block.settings.title_font_size | times: 0.9 }}px;
    }

    .ai-timeline-description-{{ ai_gen_id }} {
      font-size: {{ block.settings.description_font_size | times: 0.9 }}px;
    }
  }
{% endstyle %}

<scroll-timeline-{{ ai_gen_id }}
  class="ai-timeline-container-{{ ai_gen_id }}"
  data-trigger-offset="{{ block.settings.trigger_offset }}"
  {{ block.shopify_attributes }}
>
  <div class="ai-timeline-wrapper-{{ ai_gen_id }}">
    <div class="ai-timeline-line-{{ ai_gen_id }}"></div>
    <div class="ai-timeline-progress-{{ ai_gen_id }}"></div>

    {% for i in (1..6) %}
      {% liquid
        assign date_key = 'item_' | append: i | append: '_date'
        assign title_key = 'item_' | append: i | append: '_title'
        assign description_key = 'item_' | append: i | append: '_description'
        assign enabled_key = 'item_' | append: i | append: '_enabled'

        assign item_date = block.settings[date_key]
        assign item_title = block.settings[title_key]
        assign item_description = block.settings[description_key]
        assign item_enabled = block.settings[enabled_key]
      %}

      {% if item_enabled and item_title != blank %}
        <div class="ai-timeline-item-{{ ai_gen_id }}" data-timeline-item>
          <div class="ai-timeline-dot-{{ ai_gen_id }}"></div>
          <div class="ai-timeline-content-{{ ai_gen_id }}">
            {% if item_date != blank %}
              <div class="ai-timeline-date-{{ ai_gen_id }}">{{ item_date }}</div>
            {% endif %}
            <h3 class="ai-timeline-title-{{ ai_gen_id }}">{{ item_title }}</h3>
            {% if item_description != blank %}
              <div class="ai-timeline-description-{{ ai_gen_id }}">{{ item_description }}</div>
            {% endif %}
          </div>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</scroll-timeline-{{ ai_gen_id }}>

<script>
  (function() {
    class ScrollTimeline{{ ai_gen_id }} extends HTMLElement {
      constructor() {
        super();
        this.items = [];
        this.progressLine = null;
        this.triggerOffset = 0.7;
      }

      connectedCallback() {
        this.items = Array.from(this.querySelectorAll('[data-timeline-item]'));
        this.progressLine = this.querySelector('.ai-timeline-progress-{{ ai_gen_id }}');
        this.triggerOffset = parseFloat(this.dataset.triggerOffset) / 100 || 0.7;
        
        this.setupIntersectionObserver();
        this.setupScrollListener();
        this.checkInitialVisibility();
      }

      setupIntersectionObserver() {
        const options = {
          root: null,
          rootMargin: `-${(1 - this.triggerOffset) * 100}% 0px -${this.triggerOffset * 100}% 0px`,
          threshold: 0
        };

        this.observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('active');
            } else {
              entry.target.classList.remove('active');
            }
          });
          this.updateProgressLine();
        }, options);

        this.items.forEach(item => {
          this.observer.observe(item);
        });
      }

      setupScrollListener() {
        let ticking = false;
        
        const updateProgress = () => {
          this.updateProgressLine();
          ticking = false;
        };

        window.addEventListener('scroll', () => {
          if (!ticking) {
            requestAnimationFrame(updateProgress);
            ticking = true;
          }
        });
      }

      updateProgressLine() {
        if (!this.progressLine || this.items.length === 0) return;

        const activeItems = this.items.filter(item => item.classList.contains('active'));
        
        if (activeItems.length === 0) {
          this.progressLine.style.height = '0%';
          return;
        }

        const lastActiveItem = activeItems[activeItems.length - 1];
        const lastActiveIndex = this.items.indexOf(lastActiveItem);
        const containerRect = this.getBoundingClientRect();
        const itemRect = lastActiveItem.getBoundingClientRect();
        
        const relativeTop = itemRect.top - containerRect.top;
        const itemHeight = itemRect.height;
        const progressHeight = relativeTop + (itemHeight * this.triggerOffset);
        const totalHeight = this.querySelector('.ai-timeline-wrapper-{{ ai_gen_id }}').offsetHeight;
        
        const percentage = Math.min(100, Math.max(0, (progressHeight / totalHeight) * 100));
        this.progressLine.style.height = `${percentage}%`;
      }

      checkInitialVisibility() {
        setTimeout(() => {
          this.updateProgressLine();
        }, 100);
      }

      disconnectedCallback() {
        if (this.observer) {
          this.observer.disconnect();
        }
      }
    }

    customElements.define('scroll-timeline-{{ ai_gen_id }}', ScrollTimeline{{ ai_gen_id }});
  })();
</script>

{% schema %}
{
  "name": "Interactive timeline",
  "tag": null,
  "settings": [
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "range",
      "id": "max_width",
      "min": 400,
      "max": 1200,
      "step": 50,
      "unit": "px",
      "label": "Maximum width",
      "default": 800
    },
    {
      "type": "range",
      "id": "section_padding",
      "min": 20,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Section padding",
      "default": 60
    },
    {
      "type": "range",
      "id": "timeline_offset",
      "min": 30,
      "max": 100,
      "step": 10,
      "unit": "px",
      "label": "Timeline offset",
      "default": 50
    },
    {
      "type": "range",
      "id": "item_spacing",
      "min": 20,
      "max": 80,
      "step": 10,
      "unit": "px",
      "label": "Item spacing",
      "default": 40
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Timeline line"
    },
    {
      "type": "range",
      "id": "line_width",
      "min": 1,
      "max": 6,
      "step": 1,
      "unit": "px",
      "label": "Line width",
      "default": 2
    },
    {
      "type": "color",
      "id": "line_color",
      "label": "Line color",
      "default": "#e0e0e0"
    },
    {
      "type": "color",
      "id": "active_line_color",
      "label": "Active line color",
      "default": "#121212"
    },
    {
      "type": "header",
      "content": "Timeline dots"
    },
    {
      "type": "range",
      "id": "dot_size",
      "min": 8,
      "max": 24,
      "step": 2,
      "unit": "px",
      "label": "Dot size",
      "default": 12
    },
    {
      "type": "range",
      "id": "dot_top_offset",
      "min": 0,
      "max": 30,
      "step": 2,
      "unit": "px",
      "label": "Dot top offset",
      "default": 8
    },
    {
      "type": "color",
      "id": "dot_color",
      "label": "Dot color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "dot_border_color",
      "label": "Dot border color",
      "default": "#e0e0e0"
    },
    {
      "type": "range",
      "id": "dot_border_width",
      "min": 1,
      "max": 4,
      "step": 1,
      "unit": "px",
      "label": "Dot border width",
      "default": 2
    },
    {
      "type": "color",
      "id": "active_dot_color",
      "label": "Active dot color",
      "default": "#121212"
    },
    {
      "type": "color",
      "id": "active_dot_border_color",
      "label": "Active dot border color",
      "default": "#121212"
    },
    {
      "type": "range",
      "id": "active_dot_scale",
      "min": 100,
      "max": 150,
      "step": 10,
      "unit": "%",
      "label": "Active dot scale",
      "default": 120
    },
    {
      "type": "header",
      "content": "Content styling"
    },
    {
      "type": "range",
      "id": "content_margin_left",
      "min": 20,
      "max": 60,
      "step": 5,
      "unit": "px",
      "label": "Content margin left",
      "default": 30
    },
    {
      "type": "range",
      "id": "content_padding",
      "min": 15,
      "max": 40,
      "step": 5,
      "unit": "px",
      "label": "Content padding",
      "default": 20
    },
    {
      "type": "color",
      "id": "content_background",
      "label": "Content background",
      "default": "#f9f9f9"
    },
    {
      "type": "range",
      "id": "content_border_radius",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Content border radius",
      "default": 8
    },
    {
      "type": "range",
      "id": "content_border_width",
      "min": 0,
      "max": 3,
      "step": 1,
      "unit": "px",
      "label": "Content border width",
      "default": 1
    },
    {
      "type": "color",
      "id": "content_border_color",
      "label": "Content border color",
      "default": "#e0e0e0"
    },
    {
      "type": "range",
      "id": "content_shadow_y",
      "min": 0,
      "max": 10,
      "step": 1,
      "unit": "px",
      "label": "Content shadow Y",
      "default": 2
    },
    {
      "type": "range",
      "id": "content_shadow_blur",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Content shadow blur",
      "default": 4
    },
    {
      "type": "range",
      "id": "content_shadow_opacity",
      "min": 0,
      "max": 30,
      "step": 5,
      "unit": "%",
      "label": "Content shadow opacity",
      "default": 10
    },
    {
      "type": "header",
      "content": "Animation"
    },
    {
      "type": "range",
      "id": "trigger_offset",
      "min": 50,
      "max": 90,
      "step": 5,
      "unit": "%",
      "label": "Trigger offset",
      "default": 70
    },
    {
      "type": "range",
      "id": "inactive_opacity",
      "min": 30,
      "max": 80,
      "step": 10,
      "unit": "%",
      "label": "Inactive opacity",
      "default": 50
    },
    {
      "type": "range",
      "id": "active_offset",
      "min": 0,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Active offset",
      "default": 8
    },
    {
      "type": "header",
      "content": "Typography"
    },
    {
      "type": "range",
      "id": "date_font_size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Date font size",
      "default": 12
    },
    {
      "type": "color",
      "id": "date_color",
      "label": "Date color",
      "default": "#666666"
    },
    {
      "type": "range",
      "id": "date_margin_bottom",
      "min": 4,
      "max": 16,
      "step": 2,
      "unit": "px",
      "label": "Date margin bottom",
      "default": 8
    },
    {
      "type": "select",
      "id": "date_font_weight",
      "label": "Date font weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semi-bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "500"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "min": 16,
      "max": 28,
      "step": 2,
      "unit": "px",
      "label": "Title font size",
      "default": 20
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#121212"
    },
    {
      "type": "range",
      "id": "title_margin_bottom",
      "min": 6,
      "max": 20,
      "step": 2,
      "unit": "px",
      "label": "Title margin bottom",
      "default": 12
    },
    {
      "type": "select",
      "id": "title_font_weight",
      "label": "Title font weight",
      "options": [
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semi-bold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "600"
    },
    {
      "type": "range",
      "id": "description_font_size",
      "min": 12,
      "max": 18,
      "step": 1,
      "unit": "px",
      "label": "Description font size",
      "default": 14
    },
    {
      "type": "color",
      "id": "description_color",
      "label": "Description color",
      "default": "#666666"
    },
    {
      "type": "header",
      "content": "Timeline item 1"
    },
    {
      "type": "checkbox",
      "id": "item_1_enabled",
      "label": "Enable item 1",
      "default": true
    },
    {
      "type": "text",
      "id": "item_1_date",
      "label": "Date",
      "default": "2024"
    },
    {
      "type": "text",
      "id": "item_1_title",
      "label": "Title",
      "default": "Company Founded"
    },
    {
      "type": "textarea",
      "id": "item_1_description",
      "label": "Description",
      "default": "Our journey began with a simple idea to create amazing products."
    },
    {
      "type": "header",
      "content": "Timeline item 2"
    },
    {
      "type": "checkbox",
      "id": "item_2_enabled",
      "label": "Enable item 2",
      "default": true
    },
    {
      "type": "text",
      "id": "item_2_date",
      "label": "Date",
      "default": "2024"
    },
    {
      "type": "text",
      "id": "item_2_title",
      "label": "Title",
      "default": "First Product Launch"
    },
    {
      "type": "textarea",
      "id": "item_2_description",
      "label": "Description",
      "default": "We launched our first product and received amazing feedback from customers."
    },
    {
      "type": "header",
      "content": "Timeline item 3"
    },
    {
      "type": "checkbox",
      "id": "item_3_enabled",
      "label": "Enable item 3",
      "default": true
    },
    {
      "type": "text",
      "id": "item_3_date",
      "label": "Date",
      "default": "2024"
    },
    {
      "type": "text",
      "id": "item_3_title",
      "label": "Title",
      "default": "Team Expansion"
    },
    {
      "type": "textarea",
      "id": "item_3_description",
      "label": "Description",
      "default": "We grew our team to better serve our growing customer base."
    },
    {
      "type": "header",
      "content": "Timeline item 4"
    },
    {
      "type": "checkbox",
      "id": "item_4_enabled",
      "label": "Enable item 4",
      "default": false
    },
    {
      "type": "text",
      "id": "item_4_date",
      "label": "Date"
    },
    {
      "type": "text",
      "id": "item_4_title",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "item_4_description",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Timeline item 5"
    },
    {
      "type": "checkbox",
      "id": "item_5_enabled",
      "label": "Enable item 5",
      "default": false
    },
    {
      "type": "text",
      "id": "item_5_date",
      "label": "Date"
    },
    {
      "type": "text",
      "id": "item_5_title",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "item_5_description",
      "label": "Description"
    },
    {
      "type": "header",
      "content": "Timeline item 6"
    },
    {
      "type": "checkbox",
      "id": "item_6_enabled",
      "label": "Enable item 6",
      "default": false
    },
    {
      "type": "text",
      "id": "item_6_date",
      "label": "Date"
    },
    {
      "type": "text",
      "id": "item_6_title",
      "label": "Title"
    },
    {
      "type": "textarea",
      "id": "item_6_description",
      "label": "Description"
    }
  ],
  "presets": [
    {
      "name": "Interactive timeline"
    }
  ]
}
{% endschema %}